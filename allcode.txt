#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

bool isSaf(int chess[4][4], int r, int c)
{
    for (int i = r - 1, j = c; i >= 0; i--)
    {
        if (chess[i][j] == 1)
        {
            return false;
        }
    }

    for (int i = r - 1, j = c-1; i >= 0,j >= 0; i--,j--)
    {
        if (chess[i][j] == 1)
        {
            return false;
        }
    }
    for (int i = r - 1, j = c+1; i >= 0,j < 4; i--,j++)
    {
        if (chess[i][j] == 1)
        {
            return false;
        }
    }

    // printf("safe AT %d %d",r,c);
    // printf("\n");
    // if(r==3)
    // {
    //    exit(0); 
    // }
    return true;
}
void nQueen(int chess[4][4],char asf[200], int row)
{
    if (row == 4)
    {
        printf("%s",asf);
        printf("\n");
        return;
    }
    for (int col = 0; col < 4; col++)
    {
        if(isSaf(chess,row,col)==true)
        {
        chess[row][col] = 1;
        char new_asf[200];
        strcpy(new_asf, asf);
        char indexc[20];
        sprintf(indexc,"%d%d",row,col);
        strcat(new_asf, indexc);
        strcat(new_asf, "  ");
        nQueen(chess,new_asf, row + 1);
        // printf("Final positions of queen is :\n");
        chess[row][col] = 0;
        
        }
    }
}
void main()
{
    int chess[4][4] = {{0}};
    nQueen(chess,"", 0);

}




////////////colour

#include <stdio.h>

#define MAX_NODES 100
#define MAX_COLOR 100

int adj_matrix[MAX_NODES][MAX_NODES]; // adjacency matrix to store the graph
int color[MAX_NODES]; // array to store the colors assigned to nodes
int num_nodes; // number of nodes in the graph

// function to check if a particular color can be assigned to a node
int is_color_valid(int node, int c) {
    for (int i = 0; i < num_nodes; i++) {
        if (adj_matrix[node][i] && c == color[i]) {
            return 0; // color is already assigned to adjacent node
        }
    }
    return 1;
}

// function to assign colors to nodes recursively
int assign_colors(int node) {
    if (node == num_nodes) { // all nodes have been assigned a color
        return 1;
    }
    
    for (int c = 1; c <= MAX_COLOR; c++) { // try all possible colors for this node
        if (is_color_valid(node, c)) {
            color[node] = c;
            if (assign_colors(node + 1)) {
                return 1; // colors have been assigned to all nodes
            }
            color[node] = 0; // backtrack
        }
    }
    
    return 0; // unable to assign colors
}

int main() {
    printf("Enter the number of nodes: ");
    scanf("%d", &num_nodes);
    
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < num_nodes; i++) {
        for (int j = 0; j < num_nodes; j++) {
            scanf("%d", &adj_matrix[i][j]);
        }
    }
    
    if (assign_colors(0)) {
        printf("Colors assigned successfully!\n");
        for (int i = 0; i < num_nodes; i++) {
            printf("Node %d: Color %d\n", i, color[i]);
        }
    } else {
        printf("Unable to assign colors.\n");
    }
    
    return 0;
}

/////////////////////////////////////////////////////min max
#include <stdio.h>
#include <limits.h>

void findMinMax(int arr[], int low, int high, int *min, int *max) {
    int mid, minLeft, maxLeft, minRight, maxRight;
    
    // Base case for recursion, array has only one element
    if (low == high) {
        *min = *max = arr[low];
        return;
    }
    
    // Array has two elements
    if (high == low + 1) {
        if (arr[low] < arr[high]) {
            *min = arr[low];
            *max = arr[high];
        } else {
            *min = arr[high];
            *max = arr[low];
        }
        return;
    }
    
    // Array has more than two elements
    mid = (low + high) / 2;
    findMinMax(arr, low, mid, &minLeft, &maxLeft);
    findMinMax(arr, mid + 1, high, &minRight, &maxRight);
    
    // Determine the minimum and maximum values in the array
    if (minLeft < minRight) {
        *min = minLeft;
    } else {
        *min = minRight;
    }
    if (maxLeft > maxRight) {
        *max = maxLeft;
    } else {
        *max = maxRight;
    }
}

int main() {
    int arr[] = {1, 6, 2, 8, 3, 10, 4, 7, 5, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int min, max;
    
    findMinMax(arr, 0, n - 1, &min, &max);
    printf("Minimum element: %d\n", min);
    printf("Maximum element: %d\n", max);
    
    return 0;
}
//////////////////////////////////////////////////////////////////insertion


#include<stdio.h>
#include<stdlib.h>
#include<time.h>



int arr[100];
void main()
{
clock_t start,stop;
clock_t start_b,stop_b;
clock_t start_w,stop_w;

    // ////////insertion sort
    
    
    start=clock();
    for(int i=0;i<100;i++)
    {
        arr[i]=rand();
    }
    int key, j,n=100;
    for (int i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }

    stop=clock();
    float res=stop-start;
    printf("\nAvg case CPU time =%f units",res);
    start_b=clock();

    
    for (int i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
    stop_b=clock();
    float x=stop_b-start_b;
     printf("\nBest case CPU time =%f units",x);
     
     start_w=clock();

    
    for (int i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] < key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
    stop_w=clock();
    x=stop_w-start_w;
     printf("\nworst case CPU time =%f units",x);
     
    
    
    

}
/////////////////////////////////////////////////////////////selection
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

void main()
{

clock_t start,stop;
clock_t start_b,stop_b;
clock_t start_w,stop_w;

    // ////////insertion sort
    
    
    start=clock();
    // ////////Selection
    int arr[6]={10,11,12,13,45,78};
    int n=6;
    for (int i = 0; i < n; i++)
    {
        int min=i;
        for(int j=i+1;j<n;j++)
        {
            if(arr[j]<arr[i])
            {
                min=j;
            }
        }
       int x=arr[min];
       arr[i]=arr[min];
       arr[min]=x;
    }

    stop=clock();
    float res=stop-start;
    printf("\nAvg case CPU time =%f units",res);
    start_b=clock();

    for(int i=0;i<6;i++)
    {
        printf("%d ",arr[i]);
    }

}
//////////////////////////////////////////////////////////////////quick
#include<stdio.h>
#include<stdio.h>
int a[6]={110,3000,15,6,9,10};
int partition(int a[6],int p,int q)
{
int x=a[p];
int i=p;
for (int j = i+1; j <= q; j++)
{
  if(a[j]<=x)
    {
        i=i+1;
        int temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }

}
int temp=a[i];
        a[i]=a[p];
        a[p]=temp;
return i;
}

void quicksort(int a[],int p,int q)
{
int partitionIndex;
if(p<q)
{
    partitionIndex=partition(a,p,q);
    quicksort(a,p,partitionIndex-1);
    quicksort(a,partitionIndex+1,q);

}
}
void main()
{

    quicksort(a,0,5);
    for (int j = 0; j < 6; j++) {
            printf("%d ", a[j]);
   
    }
    printf("\n");
}
////////////////////////////////////////////////////////merge
#include <stdio.h>

void merge(int arr[], int left[], int leftSize, int right[], int rightSize) {
    int i = 0, j = 0, k = 0;

    while (i < leftSize && j < rightSize) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
        }
    }

    while (i < leftSize) {
        arr[k++] = left[i++];
    }

    while (j < rightSize) {
        arr[k++] = right[j++];
    }
}

void mergeSort(int arr[], int size) {
    if (size < 2) {
        return;
    }

    int mid = size / 2;
    int left[mid];
    int right[size - mid];

    for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
    }

    for (int i = mid; i < size; i++) {
        right[i - mid] = arr[i];
    }

    mergeSort(left, mid);
    mergeSort(right, size - mid);
    merge(arr, left, mid, right, size - mid);
}

int main() {
    int arr[] = {10, 8, 6, 4, 2, 1};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    mergeSort(arr, size);

    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
//////////////////////////////////////////////////////////binary search
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
int arr[9]={10,20,416,4,6,100,60,50,1};
int pivot(int arr[9],int p,int q)
{
    int x=arr[p];
    int i=p;
    for (int j = i+1; j <=q; j++)
    {
        if(arr[j]<=x)
        {
            i=i+1;
            int temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
    }
    int temp=arr[i];
            arr[i]=arr[p];
            arr[p]=temp; 

            return i;

}
void quicksort(int arr[9],int p,int q)
{int pivotindex;
if(p<q)
{
   pivotindex=pivot(arr,p,q);
    quicksort(arr,p,pivotindex-1);
    quicksort(arr,pivotindex+1,q);

}
}
void binarysort(int arr[],int low,int high,int data)
{
    int mid;
   if(low>high)
   {
return 0;
   } 
   mid=(low+high)/2;
   if(arr[mid]==data)
   {
    printf("data found : %d",data);
    return ;

   }
   else if (arr[mid]<data)
   {
    binarysort(arr,mid+1,high,data);
   }
   else
{
    binarysort(arr,low,mid-1,data);
}   
   
}
void main()
{
    quicksort(arr,0,8);
    for (int i = 0; i < 9; i++)
    {
        printf("%d\t",arr[i]);
    }
    binarysort(arr,0,8,1);
    
}
///////////////////////////////////////////////////////////////////////////////////////greedy single pair sortest path
#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define V 6

int minDistance(int dist[], bool sptSet[])
{
   int min = INT_MAX, min_index;

   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;

   return min_index;
}

void dijkstra(int graph[V][V], int src)
{
     int dist[V];
     bool sptSet[V];

     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;

     dist[src] = 0;

     for (int count = 0; count < V-1; count++)
     {
       int u = minDistance(dist, sptSet);

       sptSet[u] = true;

       for (int v = 0; v < V; v++)
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }

     printf("Vertex \t\t Distance from Source\n");
     for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

int main()
{
   int graph[V][V] = {{0, 2, 0, 4, 0, 0},
                      {2, 0, 3, 0, 0, 0},
                      {0, 3, 0, 0, 0, 4},
                      {4, 0, 0, 0, 2, 0},
                      {0, 0, 0, 2, 0, 1},
                      {0, 0, 4, 0, 1, 0}};

    dijkstra(graph, 0);

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////prims
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define V 5 // number of vertices

int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;
  
    for (int v = 0; v < V; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
  
    return min_index;
}

void primMST(int graph[V][V]) {
    int parent[V];
    int key[V];
    int mstSet[V];
  
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }
  
    key[0] = 0;
    parent[0] = -1; 
  
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;
  
        for (int v = 0; v < V; v++) {
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
  
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}
  
int main() {
    int graph[V][V] = {
        { 0, 2, 0, 6, 0 },
        { 2, 0, 3, 8, 5 },
        { 0, 3, 0, 0, 7 },
        { 6, 8, 0, 0, 9 },
        { 0, 5, 7, 9, 0 }
    };
  
    primMST(graph);
  
    return 0;
}

////////////////////////////////////////////////////////////////////

#include<stdio.h>
#include<stdio.h>

int max, min;

int a[100];

void maxmin(int i, int j)

{

	int max1, min1, mid;

	if(i==j)

	{

    	max = min = a[i];

	}

	else

	{

    	if(i == j-1)

    	{

        	if(a[i] <a[j])

        	{

            	max = a[j];

            	min = a[i];

        	}

        	else

        	{

            	max = a[i];

            	min = a[j];

        	}

    	}

    	else

    	{

        	mid = (i+j)/2;

        	maxmin(i, mid);

        	max1 = max;

        	min1 = min;

        	maxmin(mid+1,j);

        	if(max <max1)

            	max = max1;

        	if(min > min1)

            	min = min1;

    	}

	}

}

int main ()

{

	int i,num;

	printf ("\nEnter the number of elements : ");

	scanf ("%d",&num);

	printf ("Enter the elements : \n");

	for (i=1;i<=num;i++)

	{

     	scanf ("%d",&a[i]);

	}

	max = a[0];

	min = a[0];

	maxmin(1, num);

	printf ("Minimum element in an array : %d\n", min);

	printf ("Maximum element in an array : %d\n", max);

	return 0;

}

////////////////////////kruskals
#include<stdio.h>
 
#define MAX 30
 
typedef struct edge
{
int u,v,w;
}edge;
 
typedef struct edgelist
{
edge data[MAX];
int n;
}edgelist;
 
edgelist elist;
 
int G[MAX][MAX],n;
edgelist spanlist;
 
void kruskal();
int find(int belongs[],int vertexno);
void union1(int belongs[],int c1,int c2);
void sort();
void print();
 
void main()
{
int i,j,total_cost;
printf("\nEnter number of vertices:");
scanf("%d",&n);
printf("\nEnter the adjacency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
kruskal();
print();
}
 
void kruskal()
{
int belongs[MAX],i,j,cno1,cno2;
elist.n=0;
 
for(i=1;i<n;i++)
for(j=0;j<i;j++)
{
if(G[i][j]!=0)
{
elist.data[elist.n].u=i;
elist.data[elist.n].v=j;
elist.data[elist.n].w=G[i][j];
elist.n++;
}
}
 
sort();
for(i=0;i<n;i++)
belongs[i]=i;
spanlist.n=0;
for(i=0;i<elist.n;i++)
{
cno1=find(belongs,elist.data[i].u);
cno2=find(belongs,elist.data[i].v);
if(cno1!=cno2)
{
spanlist.data[spanlist.n]=elist.data[i];
spanlist.n=spanlist.n+1;
union1(belongs,cno1,cno2);
}
}
}
 
int find(int belongs[],int vertexno)
{
return(belongs[vertexno]);
}
 
void union1(int belongs[],int c1,int c2)
{
int i;
for(i=0;i<n;i++)
if(belongs[i]==c2)
belongs[i]=c1;
}
 
void sort()
{
int i,j;
edge temp;
for(i=1;i<elist.n;i++)
for(j=0;j<elist.n-1;j++)
if(elist.data[j].w>elist.data[j+1].w)
{
temp=elist.data[j];
elist.data[j]=elist.data[j+1];
elist.data[j+1]=temp;
}
}
 
void print()
{
int i,cost=0;
for(i=0;i<spanlist.n;i++)
{
printf("\n%d\t%d\t%d",spanlist.data[i].u,spanlist.data[i].v,spanlist.data[i].w);
cost=cost+spanlist.data[i].w;
}
 
printf("\n\nCost of the spanning tree=%d",cost);
}
//////////////////////////////////////////////////////LCS

// The longest common subsequence in C

#include <stdio.h>
#include <string.h>

int i, j, m, n, LCS_table[20][20];
char S1[20] = "deepgohil", S2[20] = "deil", b[20][20];

void lcsAlgo() {
  m = strlen(S1);
  n = strlen(S2);

  // Filling 0's in the matrix
  for (i = 0; i <= m; i++)
    LCS_table[i][0] = 0;
  for (i = 0; i <= n; i++)
    LCS_table[0][i] = 0;

  // Building the mtrix in bottom-up way
  for (i = 1; i <= m; i++)
    for (j = 1; j <= n; j++) {
      if (S1[i - 1] == S2[j - 1]) {
        LCS_table[i][j] = LCS_table[i - 1][j - 1] + 1;
      } else if (LCS_table[i - 1][j] >= LCS_table[i][j - 1]) {
        LCS_table[i][j] = LCS_table[i - 1][j];
      } else {
        LCS_table[i][j] = LCS_table[i][j - 1];
      }
    }

  int index = LCS_table[m][n];
  char lcsAlgo[index + 1];
  lcsAlgo[index] = '\0';

  int i = m, j = n;
  while (i > 0 && j > 0) {
    if (S1[i - 1] == S2[j - 1]) {
      lcsAlgo[index - 1] = S1[i - 1];
      i--;
      j--;
      index--;
    }

    else if (LCS_table[i - 1][j] > LCS_table[i][j - 1])
      i--;
    else
      j--;
  }

  // Printing the sub sequences
  printf("S1 : %s \nS2 : %s \n", S1, S2);
  printf("LCS: %s", lcsAlgo);
}

int main() {
  lcsAlgo();
  printf("\n");
}
////////////////////////////////////////bellman foard
// Bellman Ford Algorithm in C

#include <stdio.h>
#include <stdlib.h>

#define INFINITY 99999

//struct for the edges of the graph
struct Edge {
  int u;  //start vertex of the edge
  int v;  //end vertex of the edge
  int w;  //weight of the edge (u,v)
};

//Graph - it consists of edges
struct Graph {
  int V;        //total number of vertices in the graph
  int E;        //total number of edges in the graph
  struct Edge *edge;  //array of edges
};

void bellmanford(struct Graph *g, int source);
void display(int arr[], int size);

int main(void) {
  //create graph
  struct Graph *g = (struct Graph *)malloc(sizeof(struct Graph));
  g->V = 4;  //total vertices
  g->E = 5;  //total edges

  //array of edges for graph
  g->edge = (struct Edge *)malloc(g->E * sizeof(struct Edge));

  //------- adding the edges of the graph
  /*
		edge(u, v)
		where 	u = start vertex of the edge (u,v)
				v = end vertex of the edge (u,v)
		
		w is the weight of the edge (u,v)
	*/

  //edge 0 --> 1
  g->edge[0].u = 0;
  g->edge[0].v = 1;
  g->edge[0].w = 5;

  //edge 0 --> 2
  g->edge[1].u = 0;
  g->edge[1].v = 2;
  g->edge[1].w = 4;

  //edge 1 --> 3
  g->edge[2].u = 1;
  g->edge[2].v = 3;
  g->edge[2].w = 3;

  //edge 2 --> 1
  g->edge[3].u = 2;
  g->edge[3].v = 1;
  g->edge[3].w = 6;

  //edge 3 --> 2
  g->edge[4].u = 3;
  g->edge[4].v = 2;
  g->edge[4].w = 2;

  bellmanford(g, 0);  //0 is the source vertex

  return 0;
}

void bellmanford(struct Graph *g, int source) {
  //variables
  int i, j, u, v, w;

  //total vertex in the graph g
  int tV = g->V;

  //total edge in the graph g
  int tE = g->E;

  //distance array
  //size equal to the number of vertices of the graph g
  int d[tV];

  //predecessor array
  //size equal to the number of vertices of the graph g
  int p[tV];

  //step 1: fill the distance array and predecessor array
  for (i = 0; i < tV; i++) {
    d[i] = INFINITY;
    p[i] = 0;
  }

  //mark the source vertex
  d[source] = 0;

  //step 2: relax edges |V| - 1 times
  for (i = 1; i <= tV - 1; i++) {
    for (j = 0; j < tE; j++) {
      //get the edge data
      u = g->edge[j].u;
      v = g->edge[j].v;
      w = g->edge[j].w;

      if (d[u] != INFINITY && d[v] > d[u] + w) {
        d[v] = d[u] + w;
        p[v] = u;
      }
    }
  }

  //step 3: detect negative cycle
  //if value changes then we have a negative cycle in the graph
  //and we cannot find the shortest distances
  for (i = 0; i < tE; i++) {
    u = g->edge[i].u;
    v = g->edge[i].v;
    w = g->edge[i].w;
    if (d[u] != INFINITY && d[v] > d[u] + w) {
      printf("Negative weight cycle detected!\n");
      return;
    }
  }

  //No negative weight cycle found!
  //print the distance and predecessor array
  printf("Distance array: ");
  display(d, tV);
  printf("Predecessor array: ");
  display(p, tV);
}

void display(int arr[], int size) {
  int i;
  for (i = 0; i < size; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");
}
//////////////////////////////////////////////////////////////////////////sum of sumofsubset
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

void sumofsubset(int arr[], int index, int sos, int tar,char asf[1000])
{
    if (index == 6)
    {
        if (sos == tar)
        {
            printf("%s\n", asf);
        }
        return;
    }

    char new_asf[200];
    strcpy(new_asf, asf);
    char indexc[20];
    sprintf(indexc,"%d",arr[index]);
    strcat(new_asf, indexc);
    strcat(new_asf, "  ");



    sumofsubset(arr, index + 1, sos + arr[index], tar,new_asf);
    sumofsubset(arr, index + 1, sos, tar,asf);
}
void main()
{
    int arr[] = {10, 20, 30, 40, 50, 60};
    int target = 60;
    sumofsubset(arr, 0, 0, target," ");
}

//////////////////////////////////////////////////rabin karp
// Rabin-Karp algorithm in C

#include <stdio.h>
#include <string.h>

#define d 10

void rabinKarp(char pattern[], char text[], int q) {
  int m = strlen(pattern);
  int n = strlen(text);
  int i, j;
  int p = 0;
  int t = 0;
  int h = 1;

  for (i = 0; i < m - 1; i++)
    h = (h * d) % q;

  // Calculate hash value for pattern and text
  for (i = 0; i < m; i++) {
    p = (d * p + pattern[i]) % q;
    t = (d * t + text[i]) % q;
  }

  // Find the match
  for (i = 0; i <= n - m; i++) {
    if (p == t) {
      for (j = 0; j < m; j++) {
        if (text[i + j] != pattern[j])
          break;
      }

      if (j == m)
        printf("Pattern is found at position:  %d \n", i + 1);
    }

    if (i < n - m) {
      t = (d * (t - text[i] * h) + text[i + m]) % q;

      if (t < 0)
        t = (t + q);
    }
  }
}

int main() {
  char text[] = "ABCCDDAEFG";
  char pattern[] = "CDD";
  int q = 13;
  rabinKarp(pattern, text, q);
}

///////////////////////////////////////////////////////////////////////KMP


#include <stdio.h>
#include <string.h>

void computeLPSArray(char* pat, int M, int* lps) {
    int len = 0;
    lps[0] = 0;
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len-1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void KMPSearch(char* pat, char* txt) {
    int M = strlen(pat);
    int N = strlen(txt);

    int lps[M];

    computeLPSArray(pat, M, lps);

    int i = 0; 
    int j = 0; 
    while (i < N) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }

        if (j == M) {
            printf("Found pattern at index %d \n", i-j);
            j = lps[j-1];
        } else if (i < N && pat[j] != txt[i]) {
            if (j != 0)
                j = lps[j-1];
            else
                i++;
        }
    }
}

int main() {
    char txt[] = "ABABDABACDABABCABAB";
    char pat[] = "ABA";
    KMPSearch(pat, txt);
    return 0;
}


